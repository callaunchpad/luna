#!/bin/bash
#
# This configure script is hand-generated, not auto-generated.
# It creates the file kaldi.mk, which is %included by the Makefiles
# in the subdirectories.
# The file kaldi.mk is editable by hand-- for example, you may want to
# remove the options -g -O0 -DKALDI_PARANOID, or edit the
# -DKALDI_DOUBLE_PRECISION option (to be 1 not 0),


#  Example command lines:
# ./configure --shared  ## shared libraries.
# ./configure
# ./configure --mkl-root=/opt/intel/mkl
# ./configure --mkl-root=/opt/intel/mkl --threaded-math=yes
# ./configure --mkl-root=/opt/intel/mkl --threaded-math=yes --mkl-threading=tbb
#        # This is for MKL 11.3, which does not seem  to provide Intel OMP libs
# ./configure  --openblas-root=../tools/OpenBLAS/install  # before doing
#        # this, cd to ../tools and type "make openblas".  Note:
#        # this is not working correctly on all platforms, do "make test"
#        # and look out for segmentation faults.
# ./configure --atlas-root=../tools/ATLAS/build
# ./configure --use-cuda=no   # disable CUDA detection (will build cpu-only
#                             # version of kaldi even on CUDA-enabled machine
#        # Cross compile for armv8hf, this assumes that you have openfst built
#        # with the armv8-rpi3-linux-gnueabihf toolchain and installed to
#        # /opt/cross/armv8hf.  It also assumes that you have an ATLAS library
#        # built for the target install to /opt/cross/armv8hf and that the
#        # armv8-rpi3-linux-gnueabihf toolchain is available in your path
# ./configure --static --fst-root=/opt/cross/armv8hf --atlas-root=/opt/cross/armv8hf --host=armv8-rpi3-linux-gnueabihf
#        # Cross compile for Android on arm
#        # The only difference here is the addtion of the the --android-includes
#        # flag because the toolchains produced by the Android NDK don't always
#        # include the C++ stdlib headers in the normal cross compile include
#        # path
# ./configure --static --openblas-root=/opt/cross/arm-linux-androideabi \
# --fst-root=/opt/cross/arm-linux-androideabi --host=arm-linux-androideabi \
# --fst-version=1.4.1 --android-includes=/opt/cross/arm-linux-androideabi/sysroot/usr/include

#This should be incremented after every significant change of the configure script
#I.e. after each change that affects the kaldi.mk or the build system as whole
CONFIGURE_VERSION=5

function rel2abs {
  if [ ! -z "$1" ]; then
    local retval=`cd $1 2>/dev/null && pwd || exit 1`
    echo $retval
  fi
}

function read_dirname {
  local dir_name=`expr "X$1" : '[^=]*=\(.*\)'`;
  local retval=`rel2abs $dir_name`
  [ -z $retval ] && echo "Bad option '$1': no such directory" && exit 1;
  echo $retval
}

function is_set {
  local myvar=${1:-notset}
  if [ "$myvar" == "notset" ]; then
    return 1
  else
    return 0
  fi
}



##   First do some checks.  These verify that all the things are
##   here that should be here.
if ! [ -x "$PWD/configure" ]; then
  echo 'You must run "configure" from the src/ directory.'
  exit 1
fi

## Default locations for FST and linear algebra libraries.
MATHLIB='ATLAS'
ATLASROOT=`rel2abs ../tools/ATLAS/`
FSTROOT=`rel2abs ../tools/openfst`

# Avoid using any variables that are set in the shell.
unset MKLROOT
unset CLAPACKROOT
unset OPENBLASROOT
unset MKLLIBDIR
unset HOST

function usage {
  echo 'Usage: ./configure [--static|--shared] [--threaded-atlas={yes|no}] [--atlas-root=ATLASROOT] [--fst-root=FSTROOT]
  [--openblas-root=OPENBLASROOOT] [--clapack-root=CLAPACKROOT] [--mkl-root=MKLROOT] [--mkl-libdir=MKLLIBDIR]
  [--omp-libdir=OMPDIR] [--static-fst={yes|no}] [--static-math={yes|no}] [--threaded-math={yes|no}] [--mathlib=ATLAS|MKL|CLAPACK|OPENBLAS]
  [--use-cuda={yes|no}] [--cudatk-dir=CUDATKDIR][--mkl-threading=sequential|iomp|tbb|gomp] [--fst-version=VERSION]
  [--host=HOST] [--android-includes=ANDROID_INC_DIR]';
}

threaded_atlas=false #  By default, use the un-threaded version of ATLAS.
threaded_math=${threaded_atlas}
static_math=false
static_fst=false
use_cuda=true
dynamic_kaldi=false
mkl_threading=sequential
# HOST and TARGET_ARCH are used when cross compiling, the user will specify HOST via the --host
# switch.  TARGET_ARCH will be the first value in HOST if set, and `uname -m` otherwise
HOST=""
TARGET_ARCH=""
android=false

cmd_line="$0 $@"  # Save the command line to include in kaldi.mk

while [ $# -gt 0 ];
do
  case "$1" in
  --help)
    usage; exit 0 ;;
  --version)
    echo $CONFIGURE_VERSION; exit 0 ;;
  --static)
    dynamic_kaldi=false;
    static_math=true;
    static_fst=true;
    shift ;;
  --shared)
    dynamic_kaldi=true;
    static_math=false;
    static_fst=false;
    shift ;;
  --atlas-root=*)
    ATLASROOT=`read_dirname $1`;
    shift ;;
  --threaded-atlas=yes)
    threaded_atlas=true;
    shift ;;
  --threaded-atlas=no)
    threaded_atlas=false;
    shift ;;
  --threaded-math=yes)
    threaded_atlas=true;
    threaded_math=true;
    mkl_threading=iomp
    shift ;;
  --threaded-math=no)
    threaded_atlas=false;
    threaded_math=false;
    mkl_threading=sequential
    shift ;;
  --use-cuda=yes)
    use_cuda=true;
    shift ;;
  --use-cuda=no)
    use_cuda=false;
    shift ;;
  --static-math=yes)
    static_math=true;
    shift ;;
  --static-math=no)
    static_math=false;
    shift ;;
  --static-fst=yes)
    static_fst=true;
    shift ;;
  --static-fst=no)
    static_fst=false;
    shift ;;
  --mkl-threading=sequential)
    threaded_atlas=false;
    threaded_math=false;
    mkl_threading=sequential;
    shift ;;
  --mkl-threading=*)
    mkl_threading=`expr "X$1" : '[^=]*=\(.*\)'`;
    threaded_atlas=true;
    threaded_math=true;
    shift ;;
  --fst-root=*)
    FSTROOT=`read_dirname $1`;
    shift ;;
  --clapack-root=*)
    CLAPACKROOT=`read_dirname $1`;
    shift ;;
  --openblas-root=*)
    OPENBLASROOT=`read_dirname $1`;
    shift ;;
  --mkl-root=*)
    MKLROOT=`read_dirname $1`;
    shift ;;
  --mkl-libdir=*)
    MKLLIBDIR=`read_dirname $1`;
    shift ;;
  --speex-root=*)
    SPEEXROOT=`read_dirname $1`;
    shift ;;
  --speex-libdir=*)
    SPEEXLIBDIR=`read_dirname $1`;
    shift ;;
  --speex-includedir=*)
    SPEEXINCLUDEDIR=`read_dirname $1`;
    shift ;;
  --omp-libdir=*)
    OMPLIBDIR=`read_dirname $1`;
    shift ;;
  --mathlib=*)
    MATHLIB=`expr "X$1" : '[^=]*=\(.*\)'`;
    shift ;;
  --cudatk-dir=*)
    CUDATKDIR=`read_dirname $1`;
    shift ;; #CUDA is used in src/cudamatrix and src/nnet{,bin} only
  --fst-version=*)
    OPENFST_VER=`expr "X$1" : '[^=]*=\(.*\)'`;
    shift;;
  --host=*)
    # This expects the same format of host "triple" as autotools based projects
    # this script will infer the target architecture from the specified triple.
    HOST=`expr "X$1" : '[^=]*=\(.*\)'`;
    shift ;;
  --android-includes=*)
    threaded_math=false;
    static_math=true;
    static_fst=true;
    dynamic_kaldi=false;
    MATHLIB='OPENBLAS';
    android=true;
    ANDROIDINC=`read_dirname $1`;
    shift;;
  *)  echo "Unknown argument: $1, exiting"; usage; exit 1 ;;
  esac
done


# the idea here is that if you change the configuration options from using
# CUDA to not using it, or vice versa, we want to recompile all parts of the
# code that may use a GPU.  Touching this file is a way to force this.
touch cudamatrix/cu-common.h 2>/dev/null


function add_cross_tools {
  # If the $HOST variable is set, we need to tell make to use the specified tools
  if [ ! -z "$HOST" ]; then
    echo '# A host triple was specified, we need to prepend all the tools with it' >> kaldi.mk
    echo "HOST = $HOST" >> kaldi.mk
    echo 'CC := $(HOST)-$(CC)' >> kaldi.mk
    echo 'CXX := $(HOST)-$(CXX)' >> kaldi.mk
    echo 'AR := $(HOST)-$(AR)' >> kaldi.mk
    echo 'AS := $(HOST)-$(AS)' >> kaldi.mk
    echo 'RANLIB := $(HOST)-$(RANLIB)' >> kaldi.mk
  fi
}

function failure {
  echo "***configure failed: $* ***" >&2
  if [ -f kaldi.mk ]; then rm kaldi.mk; fi
  exit 1;
}

function check_exists {
  if [ ! -f $1 ]; then failure "$1 not found."; fi
}

function check_for_bad_gcc {
  if [ -z "$HOST" ] ; then
    compiler="gcc"
  else
    compiler="$HOST-gcc"
  fi
  if which $compiler >&/dev/null; then  # gcc is on the path
    gcc_version=$($compiler -dumpspecs 2>&1 | grep -A1 -F '*version:' | grep -v version)
    if [ "$gcc_version" == "4.8.2" ] || [ "$gcc_version" == "4.8.1" ]; then
      echo "*** WARNING: your version of gcc seems to be 4.8.1 or 4.8.2. ***"
      echo "*** These versions of gcc has a bug in nth_element ***"
      echo "*** in its implementation of the standard library ***"
      echo "*** This will cause Kaldi to crash (make test   ***"
      echo "*** would fail). Please either upgrade or downgrade gcc. ***"
      exit 1
    fi
  fi
}

function check_for_slow_expf {
  # We cannot run this test if we are cross compiling.
  if [[ "$TARGET_ARCH" == "`uname -m`" ]] ; then
    cd probe
    rm -f exp-test
    make -f Makefile.slow_expf 1>/dev/null
    ./exp-test
    if [ $? -eq 1 ]; then
        echo "*** WARNING: expf() seems to be slower than exp() on your machine. This is a known bug in old versions of glibc. Please consider updating glibc. ***"
        echo "*** Kaldi will be configured to use exp() instead of expf() in base/kaldi-math.h Exp() routine for single-precision floats. ***"
        echo "CXXFLAGS += -DKALDI_NO_EXPF" >> ../kaldi.mk
    fi
    cd ..
  fi
}


function exit_success {
  check_for_bad_gcc;
  check_for_slow_expf;
  echo "SUCCESS"
  exit 0;
}



function check_library {
  local libpath=$1
  local libname=$2
  local libext=$3
  local full_libname="$libpath/$libname.$libext"
  ##echo "Testing $full_libname" >&2
  test -f "$full_libname" && return ;
  return 1
}


#Check if at least one of these variables is set
#If yes, we want to switch to using the MKL
is_set $MKLLIBDIR && echo "Force-configuring KALDI to use MKL" && export MATHLIB="MKL"
is_set $MKLROOT && echo "Force-configuring KALDI to use MKL"&& export MATHLIB="MKL"
is_set $CLAPACKROOT && echo "Force-configuring KALDI to use CLAPACK"&& export MATHLIB="CLAPACK"
is_set $OPENBLASROOT && echo "Force-configuring KALDI to use OPENBLAS"&& export MATHLIB="OPENBLAS"


# If HOST is specified, parse the TARGET_ARCH, otherwise use uname -m
if [[ "$HOST" == "" ]] ; then
  TARGET_ARCH="`uname -m`"
else
  # The HOST value will be something like "armv8-rpi3-linux-gnueabihf" and we need the first value
  # as delimited by '-' to be used as the TARGET_ARCH for this build.  The read command is the
  # bash equivalent of split() found in other scripting languages.  read uses the value in
  # environment variable IFS as the field delimiter.  The following command will take the
  # host string "armv8-rpi3-linux-gnueabihf" as streamed in from the HOST variable
  # and return ["armv8", "rpi3", "linux", "gnueabihf"] in PARTS
  #
  # Note that by changing the value of IFS (which is an environment variable) on the same
  # line as the read invocation, it is only changed for that invocation and not for the shell
  # executing this script.  So we do not need to cache and reset the value.
  IFS='-' read -ra PARTS <<< "$HOST"
  # We only want the first entry from the list as the architecture
  TARGET_ARCH="$PARTS"
  if [[ "$TARGET_ARCH" != arm* && "$TARGET_ARCH" != ppc64le && "$TARGET_ARCH" != x86* ]] ; then
    # We currently only support building for x86[_64], arm*, and ppc64le, if the
    # TARGET_ARCH was read from the HOST variable, it must be one of these
    failure "$TARGET_ARCH is an unsupported architecture, kaldi currently supports x86[_64], arm*, and ppc64le"
  fi
fi


#MKL functions
function linux_configure_mkllibdir {
  local mklroot=$1

  if [ -d $mklroot/lib/em64t ]; then
    echo $mklroot/lib/em64t
  elif [ -d $mklroot/lib/intel64 ]; then
    echo $mklroot/lib/intel64
  else
    return 1;
  fi
}

function linux_configure_mkl_includes {
  test -d $1/include && echo "$1/include" && return;
  test -d $2/../../include && echo "$2/../../include" && return;
  failure "Could not find the MKL include directory"
}


function linux_configure_mkl_libraries {
  local mkllibdir=$1
  local static=$2
  local threaded=$3
  local mplib=$4

  declare -A mkl_libs
  mkl_libs=(
    [sequential]="mkl_intel_lp64 mkl_core mkl_sequential"
    [gomp]="mkl_intel_lp64 mkl_core mkl_gnu_thread"
    [iomp]="mkl_intel_lp64 mkl_core mkl_intel_thread "
    [tbb]="mkl_intel_lp64 mkl_core mkl_tbb_thread "
  )

  if [ -z "${mkl_libs[$threaded]}" ]; then
    echo >&2 "Unknown threading mode: $threaded"
    return 1;
  fi

  local linkline=""
  if  ! $static ; then
    linkline="-L$mkllibdir -Wl,-rpath=$mkllibdir"
    for file in ${mkl_libs[$threaded]}; do
      local libfile=$mkllibdir/lib$file.so
      check_exists $libfile
      linkline+=" -l$file "
    done
  else
    if [ $threaded == "sequential" ] ; then
      test -f "$mkllibdir/libmkl_solver_lp64.a" && \
        linkline="$linkline $mkllibdir/libmkl_solver_lp64.a"
    else
      test -f "$mkllibdir/libmkl_solver_lp64_sequential.a" && \
        linkline="$linkline $mkllibdir/libmkl_solver_lp64_sequential.a"
    fi
    linkline="$linkline -Wl,--start-group"
    for file in ${mkl_libs[$threaded]}; do
      local libfile=$mkllibdir/lib${file}.a
      check_exists $libfile
      linkline="$linkline $libfile"
    done
    linkline="$linkline -Wl,--end-group "
  fi
  echo "$linkline"
}

function linux_configure_mkl_extra {
  local static=$1
  local threaded=$2

  declare -A extra_libs
  extra_libs=(
    [sequential]="-ldl -lpthread -lm"
    [gomp]="-lgomp -ldl -lpthread -lm"
    [iomp]="-ldl -lpthread -lm"
    [tbb]=" -ldl -lpthread -lm "
  )
  echo "$linkline ${extra_libs[$threaded]}"
}

function linux_configure_threadinglibdir {
  local library=$1
  local mklroot=$2
  local mkllibdir=$3
  local libexts=$4

  ##First we try to use the library in the same directory
  ##where the mkl libraries reside
  ##Afterwards, just try some possibilities for different MKL layouts
  for libext in $libexts; do
    check_library $mkllibdir "lib$library" $libext \
    && echo `readlink -f $mkllibdir` && return 0

    local testdir=`(cd $mklroot; cd ..; cd lib/intel64;pwd)`
    test -d $testdir && check_library $testdir "lib$library" $libext && echo `readlink -f $testdir` && return 0;
    local testdir=`(cd $mklroot; cd ..; cd lib/em64t;pwd)`
    test -d $testdir && check_library $testdir "lib$library" $libext && echo `readlink -f $testdir` && return 0;

    local testdir=`(cd $mkllibdir; cd ../../..; cd lib/intel64;pwd)`
    test -d $testdir && check_library $testdir "lib$library" $libext && echo `readlink -f $testdir` && return 0;
    local testdir=`(cd $mklroot; cd ../../..; cd lib/em64t;pwd)`
    test -d $testdir && check_library $testdir "lib$library" $libext && echo `readlink -f $testdir` && return 0;
  done

  #failure "Could not find the library iomp5, use the configure switch --omp-libdir"
  return 1
}

function linux_configure_mkl_threading {
  local mklroot=$1
  local mkllibdir=$2
  local static=$3
  local threading=$4

  declare -A libs
  libs=(
    [sequential]=""
    [gomp]=""
    [iomp]="iomp5"
    [tbb]="tbb"
  )

  echo >&2 "Configuring MKL threading as $threading"
  library=${libs[$threading]}
  if [ -z "$library" ]; then
    return 0
  fi

  if ! is_set $OMPLIBDIR ; then
    if  $static ; then
      OMPLIBDIR=`linux_configure_threadinglibdir $library "$MKLROOT" "$MKLLIBDIR" "a"`
    else
      OMPLIBDIR=`linux_configure_threadinglibdir $library "$MKLROOT" "$MKLLIBDIR" "so"`
    fi
  fi

  check_library $OMPLIBDIR "lib$library" "a" || \
  check_library $OMPLIBDIR "lib$library" "so" || \
  failure "Could not find the $library library, have your tried the --omp-libdir switch?"

  OMP_LINK_LINE=''
  # TODO(arnab): in the following conditional, the $static_math test is
  # needed since the OpenMP library is assumed to be dynamic.
  if [ "$OMPLIBDIR" != "$MKLLIBDIR" ] ; then
    OMP_LINK_LINE="-L${OMPLIBDIR}"
  fi
  #if the libiomp5 library is dynamic, we add the rpath attribute
  if ! $static_math ; then
    OMP_LINK_LINE="$OMP_LINK_LINE -Wl,-rpath=$OMPLIBDIR -l$library"
  else
    OMP_LINK_LINE="$OMP_LINK_LINE -Wl,-Bstatic -l$library -Wl,-Bdynamic"
  fi
  echo "$OMP_LINK_LINE"
}

##
## CUDA is used only in selected directories including src/cudamatrix, src/nnet*
## and src/chain*.  It is used to accelerate the neural network training, the
## rest of kaldi runs on CPUs.
##
function configure_cuda {
  #check for CUDA toolkit in the system
  if [ ! -d  "$CUDATKDIR" ]; then
    for base in /Developer/NVIDIA/CUDA-6.0 /usr/local/share/cuda /usr/local/cuda /pkgs_local/cuda-3.2/ /opt/nvidia_cuda/cuda-6.0/ /usr/; do
      if [ -f $base/bin/nvcc ]; then
        CUDATKDIR=$base
      fi
    done
  fi

  if [ -d "$CUDATKDIR" ]; then
    if [ ! -f $CUDATKDIR/bin/nvcc ]; then
      failure "Cannnot find nvcc in CUDATKDIR=$CUDATKDIR"
    fi

    if [[ "$TARGET_ARCH" != "`uname -m`" ]] ; then
      failure "Cannot cross compile with CUDA support"
    fi

    echo "Using CUDA toolkit $CUDATKDIR (nvcc compiler and runtime libraries)"
    echo >> kaldi.mk
    echo "#Next section enables CUDA for compilation" >> kaldi.mk
    echo CUDA = true >> kaldi.mk
    echo CUDATKDIR = $CUDATKDIR >> kaldi.mk

    # Determine 'CUDA_ARCH',
    CUDA_VERSION=$($CUDATKDIR/bin/nvcc -V | tr '.,' '_ ' | awk '/release/{sub(/.*release/,""); print $1;}') # MAJOR_MINOR,
    if [ -z "$CUDA_VERSION" ] ; then
      echo "Cannot figure out CUDA_VERSION from the nvcc output. Either your CUDA is too new or too old."
      exit 1
    fi

    case $CUDA_VERSION in
      5_5) CUDA_ARCH="-gencode arch=compute_20,code=sm_20 -gencode arch=compute_30,code=sm_30 -gencode arch=compute_35,code=sm_35" ;;
      6_*) CUDA_ARCH="-gencode arch=compute_20,code=sm_20 -gencode arch=compute_30,code=sm_30 -gencode arch=compute_35,code=sm_35 -gencode arch=compute_50,code=sm_50" ;;
      7_*) CUDA_ARCH="-gencode arch=compute_20,code=sm_20 -gencode arch=compute_30,code=sm_30 -gencode arch=compute_35,code=sm_35 -gencode arch=compute_50,code=sm_50 -gencode arch=compute_53,code=sm_53" ;;
      8_*) CUDA_ARCH="-gencode arch=compute_20,code=sm_20 -gencode arch=compute_30,code=sm_30 -gencode arch=compute_35,code=sm_35 -gencode arch=compute_50,code=sm_50 -gencode arch=compute_53,code=sm_53 -gencode arch=compute_60,code=sm_60 -gencode arch=compute_61,code=sm_61 -gencode arch=compute_62,code=sm_62" ;;
      *) echo "Unsupported CUDA_VERSION (CUDA_VERSION=$CUDA_VERSION), please report it to Kaldi mailing list, together with 'nvcc -h' or 'ptxas -h' which lists allowed -gencode values..."; exit 1 ;;
    esac
    echo "CUDA_ARCH = $CUDA_ARCH" >> kaldi.mk

    # 64bit/32bit? We do not support cross compilation with CUDA so, use direct calls to uname -m here
    if [ "`uname -m`" == "x86_64" ]; then
      if [ "`uname`" == "Darwin" ]; then
        sed 's/lib64/lib/g' < makefiles/cuda_64bit.mk >> kaldi.mk
      else
        cat makefiles/cuda_64bit.mk >> kaldi.mk
      fi
    elif [ "`uname -m`" == "ppc64le" ]; then
      cat makefiles/cuda_ppc64le.mk >> kaldi.mk
    else
      cat makefiles/cuda_32bit.mk >> kaldi.mk
    fi

  else
    echo "CUDA will not be used! If you have already installed cuda drivers "
    echo "and cuda toolkit, try using --cudatk-dir=... option.  Note: this is"
    echo "only relevant for neural net experiments"
  fi
}

function linux_configure_speex {
  #check whether the user has called tools/extras/install_speex.sh or not
  [ ! -z "$SPEEXROOT" ] || SPEEXROOT=`pwd`/../tools/speex
  [ ! -z "$SPEEXLIBDIR" ] || SPEEXLIBDIR="$SPEEXROOT"/lib
  [ ! -z "$SPEEXINCLUDEDIR" ] || SPEEXINCLUDEDIR="$SPEEXROOT"/include
  static_speex=$1
  if [ "foo"$static_speex == "foo" ]; then
    static_speex=false
  fi

  if $static_speex; then
    spx_type=a
  else
    spx_type=so
  fi
  if [ ! -f "$SPEEXLIBDIR/libspeex.${spx_type}" ];then
    echo "Info: configuring Kaldi not to link with Speex (don't worry, it's only needed if you"
    echo "intend to use 'compress-uncompress-speex', which is very unlikely)"
    return
  fi

  if [ -f $SPEEXINCLUDEDIR/speex/speex.h ]; then
    echo >> kaldi.mk
    echo CXXFLAGS += -DHAVE_SPEEX -I${SPEEXINCLUDEDIR} >> kaldi.mk

    if $static_speex; then
      echo LDLIBS += $SPEEXLIBDIR/libspeex.a
    else
      echo LDLIBS += -L${SPEEXLIBDIR} -lspeex >> kaldi.mk
      echo LDFLAGS += -Wl,-rpath=${SPEEXLIBDIR} >> kaldi.mk
    fi

    echo "Successfully configured with Speex at $SPEEXROOT, (static=[$static_speex])"
  else
    echo "Speex will not be used. If you want to use it, run tools/extras/install_speex.sh first."
  fi
}

function fix_cxx_flag {
  USINGGXX=`grep -c "CXX = g++" kaldi.mk`
  if [ $USINGGXX -ge 1 ]; then
    if [ -z "$HOST" ] ; then
      CXXCOMPILER="g++"
    else
      CXXCOMPILER="$HOST-g++"
    fi
    $CXXCOMPILER -dumpversion | \
    awk '{if(NR==1 && $1<"4.4") print "sed \"s/-Wno-unused-local-typedefs//g\" \
    kaldi.mk > tmpf; mv tmpf kaldi.mk; "}' | sh -
  fi
}

function linux_atlas_failure { # function we use when we couldn't find
   # ATLAS libs.
   echo ATLASINC = $ATLASROOT/include >> kaldi.mk
   echo ATLASLIBS = [somewhere]/liblapack.a [somewhere]/libcblas.a [somewhere]/libatlas.a [somewhere]/libf77blas.a $ATLASLIBDIR >> kaldi.mk
   if [[ "$TARGET_ARCH" == arm* ]]; then
     cat makefiles/linux_atlas_arm.mk >> kaldi.mk
   elif [[ "$TARGET_ARCH" == ppc64le ]]; then
     cat makefiles/linux_atlas_ppc64le.mk >> kaldi.mk
   else
     cat makefiles/linux_atlas.mk >> kaldi.mk
   fi
   fix_cxx_flag
   echo "** $* ***"
   echo "**  ERROR   **"
   echo "** Configure cannot proceed automatically."
   echo "**  If you know that you have ATLAS installed somewhere on your machine, you"
   echo "** may be able to proceed by replacing [somewhere] in kaldi.mk with a directory."
   echo "**  If you have sudo (root) access you could install the ATLAS package on your"
   echo "** machine, e.g. 'sudo apt-get install libatlas-dev libatlas-base-dev' or"
   echo "** 'sudo yum install atlas.x86_64' or 'sudo zypper install libatlas3-devel',"
   echo "** or on cygwin, install atlas from the installer GUI; and then run ./configure"
   echo "** again."
   echo "**"
   echo "**  Otherwise (or if you prefer OpenBLAS for speed), you could go the OpenBLAS"
   echo "** route: cd to ../tools, type 'extras/install_openblas.sh', cd back to here,"
   echo "** and type './configure  --openblas-root=../tools/OpenBLAS/install'"
   exit 1;
}

function linux_check_static {
  # will exit with success if $dir seems to contain ATLAS libraries with
  # right architecture (compatible with default "nm")
  echo "int main(void) { return 0; }" > test_linking.cc;
  if [ -f $dir/libatlas.a ]; then # candidate...
    # Note: on the next line, the variable assignment
    # LANG=en_US should apply just to the program called on that line.
    if [ -z "$HOST" ] ; then
      compiler="gcc"
    else
      compiler="$HOST-gcc"
    fi
    if LANG=en_US $compiler -o test_linking test_linking.cc -u ATL_flushcache $dir/libatlas.a 2>&1 | grep -i "incompatible" >/dev/null; then
      echo "Directory $dir may contain ATLAS libraries but seems to be wrong architecture";
      rm test_linking test_linking.cc 2>/dev/null
      return 1;
    fi
    rm test_linking test_linking.cc 2>/dev/null
    return 0;
  else
    rm test_linking.cc
    return 1;
  fi
}

function linux_configure_debian_ubuntu {
  m=$1
  ATLASLIBS="/usr/lib$m/atlas-base/libatlas.so.3gf  /usr/lib$m/atlas-base/libf77blas.so.3gf /usr/lib$m/atlas-base/libcblas.so.3gf  /usr/lib$m/atlas-base/liblapack_atlas.so.3gf"
  for f in $ATLASLIBS; do
    [ ! -f $f ] && return 1;
  done
  lapacklib=$(echo $ATLASLIBS | awk '{print $NF}')
  if ! nm --dynamic $lapacklib | grep ATL_cgetrf >/dev/null; then
    exit 1;
  fi
  echo ATLASINC = $ATLASROOT/include >> kaldi.mk
  echo ATLASLIBS = $ATLASLIBS >> kaldi.mk
  if [[ "$TARGET_ARCH" == arm* ]]; then
    cat makefiles/linux_atlas_arm.mk >> kaldi.mk
   elif [[ "$TARGET_ARCH" == ppc64le ]]; then
    cat makefiles/linux_atlas_ppc64le.mk >> kaldi.mk
  else
    cat makefiles/linux_atlas.mk >> kaldi.mk
  fi
  fix_cxx_flag
  add_cross_tools
  echo "Successfully configured for Debian/Ubuntu Linux [dynamic libraries] with ATLASLIBS =$ATLASLIBS"
  $use_cuda && configure_cuda
  linux_configure_speex
  exit_success;
}

function linux_configure_debian_ubuntu3 {
  ATLASLIBS="/usr/lib/libatlas.so.3  /usr/lib/libf77blas.so.3 /usr/lib/libcblas.so.3  /usr/lib/liblapack_atlas.so.3"
  for f in $ATLASLIBS; do
    [ ! -f $f ] && return 1;
  done
  lapacklib=$(echo $ATLASLIBS | awk '{print $NF}')
  if ! nm --dynamic $lapacklib | grep ATL_cgetrf >/dev/null; then
    exit 1;
  fi
  echo ATLASINC = $ATLASROOT/include >> kaldi.mk
  echo ATLASLIBS = $ATLASLIBS >> kaldi.mk
  if [[ "$TARGET_ARCH" == arm* ]]; then
    cat makefiles/linux_atlas_arm.mk >> kaldi.mk
  elif [[ "$TARGET_ARCH" == ppc64le ]]; then
    cat makefiles/linux_atlas_ppc64le.mk >> kaldi.mk
  else
    cat makefiles/linux_atlas.mk >> kaldi.mk
  fi
  fix_cxx_flag
  add_cross_tools
  echo "Successfully configured for Debian/Ubuntu Linux [dynamic libraries] with ATLASLIBS =$ATLASLIBS"
  $use_cuda && configure_cuda
  linux_configure_speex
  exit_success;
}

function linux_configure_debian7 {
  ATLASLIBS="/usr/lib/atlas-base/libatlas.so.3.0 /usr/lib/atlas-base/libf77blas.so.3.0 /usr/lib/atlas-base/libcblas.so.3 /usr/lib/atlas-base/liblapack_atlas.so.3"
  for f in $ATLASLIBS; do
    [ ! -f $f ] && return 1;
  done
  lapacklib=$(echo $ATLASLIBS | awk '{print $NF}')
  if ! nm --dynamic $lapacklib | grep ATL_cgetrf >/dev/null; then
    exit 1;
  fi
  libdir=$(dirname $(echo $ATLASLIBS | awk '{print $1}'))
  [ -z "$libdir" ] && echo "Error getting libdir in linux_configure_debian7" && exit 1;
  echo ATLASINC = $ATLASROOT/include >> kaldi.mk
  echo ATLASLIBS = $ATLASLIBS -Wl,-rpath=$libdir >> kaldi.mk
  echo
  if [[ "$TARGET_ARCH" == arm* ]]; then
    cat makefiles/linux_atlas_arm.mk >> kaldi.mk
  elif [[ "$TARGET_ARCH" == ppc64le ]]; then
    cat makefiles/linux_atlas_ppc64le.mk >> kaldi.mk
  else
    cat makefiles/linux_atlas.mk >> kaldi.mk
  fi
  fix_cxx_flag
  add_cross_tools
  echo "Successfully configured for Debian 7 [dynamic libraries] with ATLASLIBS =$ATLASLIBS"
  $use_cuda && configure_cuda
  linux_configure_speex
  exit_success;
}

function linux_configure_redhat {
  m=$1  # 64 or empty.
  ATLASLIBS="/usr/lib$m/atlas/libatlas.so.3 /usr/lib$m/atlas/libf77blas.so.3 /usr/lib$m/atlas/libcblas.so.3 /usr/lib$m/atlas/libclapack.so.3"
  for f in $ATLASLIBS; do
    [ ! -f $f ] && return 1;
  done
  libdir=$(dirname $(echo $ATLASLIBS | awk '{print $1}'))
  [ -z "$libdir" ] && echo "Error getting libdir in linux_configure_redhat" && exit 1;
  echo ATLASINC = $ATLASROOT/include >> kaldi.mk
  echo ATLASLIBS = $ATLASLIBS -Wl,-rpath=$libdir >> kaldi.mk
  echo
  if [[ "$TARGET_ARCH" == arm* ]]; then
    cat makefiles/linux_atlas_arm.mk >> kaldi.mk
  elif [[ "$TARGET_ARCH" == ppc64le ]]; then
    cat makefiles/linux_atlas_ppc64le.mk >> kaldi.mk
  else
    cat makefiles/linux_atlas.mk >> kaldi.mk
  fi
  fix_cxx_flag
  add_cross_tools
  echo "Successfully configured for red hat [dynamic libraries] with ATLASLIBS =$ATLASLIBS"
  $use_cuda && configure_cuda
  exit_success;
}

function linux_configure_redhat_fat {
  # This is for when only two so-called 'fat' ATLAS libs are provided:
  # libsatlas.so.3 and libtatlas.so.3.
  # See http://stackoverflow.com/questions/13439296/build-shared-libraries-in-atlas.
  m=$1  # 64 or empty.
  ATLASLIBS="/usr/lib$m/atlas/libsatlas.so.3 /usr/lib$m/atlas/libtatlas.so.3"
  for f in $ATLASLIBS; do
    [ ! -f $f ] && return 1;
  done
  libdir=$(dirname $(echo $ATLASLIBS | awk '{print $1}'))
  [ -z "$libdir" ] && echo "Error getting libdir in linux_configure_redhat_fat" && exit 1;
  echo ATLASINC = $ATLASROOT/include >> kaldi.mk
  echo ATLASLIBS = $ATLASLIBS -Wl,-rpath=$libdir >> kaldi.mk
  echo
  if [[ "$TARGET_ARCH" == arm* ]]; then
    cat makefiles/linux_atlas_arm.mk >> kaldi.mk
  elif [[ "$TARGET_ARCH" == ppc64le ]]; then
    cat makefiles/linux_atlas_ppc64le.mk >> kaldi.mk
  else
    cat makefiles/linux_atlas.mk >> kaldi.mk
  fi
  fix_cxx_flag
  add_cross_tools
  echo "Successfully configured for red hat [dynamic libraries, fat] with ATLASLIBS =$ATLASLIBS"
  $use_cuda && configure_cuda
  exit_success;
}


function linux_configure_static {
  if $threaded_atlas; then pt=pt; else pt=""; fi

  if [ -z $ATLASLIBDIR ]; then # Note: it'll pick up the last one below.
    for dir in /usr{,/local}/lib{64,}{,/atlas,/atlas-sse2,/atlas-sse3} \
       /usr/local/atlas/lib{,64} `pwd`/../tools/ATLAS/build/install/lib/ $ATLASROOT/lib; do
     linux_check_static &&  ATLASLIBDIR=$dir
    done
    if [ -z $ATLASLIBDIR ]; then # Note: it'll pick up the last one below.
      echo "Could not find libatlas.a in any of the generic-Linux places, but we'll try other stuff..."
      return 1;
    fi
  elif [ ! -f $ATLASLIBDIR/libatlas.a ]; then
    echo "Could not find libatlas.a in '$ATLASLIBDIR'"
    return 1;
  fi
  echo "Validating presence of ATLAS libs in $ATLASLIBDIR"
  ATLASLIBS=
  # The Lapack part of ATLAS seems to appear under various different names.. but it
  # should always have symbols like ATL_cgetrf defined, so we test for this,
  # for all the names we have encountered.
  for libname in liblapack liblapack_atlas  libclapack; do
    if [ -f $ATLASLIBDIR/${libname}.a -a "$ATLASLIBS" == "" ]; then
      if nm  $ATLASLIBDIR/${libname}.a  | grep ATL_cgetrf >/dev/null; then
         ATLASLIBS=$ATLASLIBDIR/${libname}.a
         echo "Using library $ATLASLIBS as ATLAS's CLAPACK library."
      fi
    fi
  done
  if [ "$ATLASLIBS" == "" ]; then
    echo Could not find any libraries $ATLASLIBDIR/{liblapack,liblapack_atlas,libclapack} that seem to be an ATLAS CLAPACK library.
    return ;
  fi

  for x in lib${pt}cblas.a libatlas.a lib${pt}f77blas.a; do
    if [ ! -f $ATLASLIBDIR/$x ]; then
      echo "Configuring static ATLAS libraries failed: Could not find library $x in directory $ATLASLIBDIR"
      return 1;
    fi
    ATLASLIBS="$ATLASLIBS $ATLASLIBDIR/$x"
  done
  if $threaded_atlas; then ATLASLIBS="$ATLASLIBS"; fi

  echo ATLASINC = $ATLASROOT/include >> kaldi.mk
  echo ATLASLIBS = $ATLASLIBS >> kaldi.mk
  if [[ "$TARGET_ARCH" == arm* ]]; then
    cat makefiles/linux_atlas_arm.mk >> kaldi.mk
  elif [[ "$TARGET_ARCH" == ppc64le ]]; then
    cat makefiles/linux_atlas_ppc64le.mk >> kaldi.mk
  else
    cat makefiles/linux_atlas.mk >> kaldi.mk
  fi
  fix_cxx_flag
  add_cross_tools
  $use_cuda && configure_cuda
  linux_configure_speex
  echo "Successfully configured for Linux [static libraries] with ATLASLIBS =$ATLASLIBS"
  exit_success;
}

function linux_check_dynamic {
  # will exit with success if $dir seems to contain ATLAS libraries with
  # right architecture (compatible with default "nm")
  if $threaded_atlas; then pt=t; else pt=s; fi
  for atlas_libname in libatlas.so lib${pt}atlas.so; do
    if [ -f $dir/$atlas_libname ]; then # candidate...
      if nm --dynamic $dir/$atlas_libname 2>&1 | grep "File format not recognized" >/dev/null; then
        echo "Directory $dir may contain dynamic ATLAS libraries but seems to be wrong architecture";
        return 1;
      fi
        echo "Atlas found in $dir";
        return 0;
      fi
  done
  # echo "... no {libatlas,lib${pt}atlas}.so in $dir";
  return 1;
}

function linux_configure_dynamic {
  if $threaded_atlas; then pt=t; else pt=s; fi # relevant to "fat" libraries, will change later for separate ones
  if [ -z $ATLASLIBDIR ]; then # Note: it'll pick up the last one below.
    for dir in /usr{,/local}/lib{,64}{,/atlas,/atlas-sse2,/atlas-sse3} \
      `pwd`/../tools/ATLAS/build/install/lib/ $ATLASROOT/lib; do
      linux_check_dynamic && ATLASLIBDIR=$dir && ATLASLIBNAME=$atlas_libname
    done
    if [ -z $ATLASLIBDIR -o -z $ATLASLIBNAME ]; then
      echo "Could not find {libatlas,lib${pt}atlas}.so in any of the obvious places, will most likely try static:"
      return 1;
    fi
  fi

  # If using "fat" libraries we only need one file to link against
  if [ $ATLASLIBNAME != libatlas.so ]; then
    if [ -f $ATLASLIBDIR/$ATLASLIBNAME ]; then
      ATLASLIBS="$ATLASLIBDIR/$ATLASLIBNAME"
    else
      echo "Configuring dynamic ATLAS library failed: library $ATLASLIBNAME not found in $ATLASLIBDIR"
      return 1;
    fi
  else  # with "thin" libraries, we have several object to link against, and different single/multi-thread names
    if $threaded_atlas; then pt=pt; else pt=""; fi
    echo "Validating presence of ATLAS libs in $ATLASLIBDIR"
    ATLASLIBS=
    # The Lapack part of ATLAS seems to appear under various different names.. but it
    # should always have symbols like ATL_cgetrf defined, so we test for this,
    # for all the names we have encountered.
    for libname in lapack lapack_atlas  clapack; do
      if [ -f $ATLASLIBDIR/lib${libname}.so -a "$ATLASLIBS" == "" ]; then
        if nm  --dynamic $ATLASLIBDIR/lib${libname}.so  | grep ATL_cgetrf >/dev/null; then
           ATLASLIBS="$ATLASLIBDIR/lib${libname}.so"
           echo "Using library $ATLASLIBS as ATLAS's CLAPACK library."
        fi
      fi
    done
    if [ "$ATLASLIBS" == "" ]; then
      echo Could not find any libraries $ATLASLIBDIR/{liblapack,liblapack_atlas,libclapack} that seem to be an ATLAS CLAPACK library.
      return 1;
    fi

    for x in ${pt}cblas atlas ${pt}f77blas; do
      if [ ! -f $ATLASLIBDIR/lib$x.so ]; then
        echo "Configuring dynamic ATLAS libraries failed: Could not find library $x in directory $ATLASLIBDIR"
        return 1;
      fi
      ATLASLIBS="$ATLASLIBS $ATLASLIBDIR/lib${x}.so"
    done
    if $threaded_atlas; then ATLASLIBS="$ATLASLIBS"; fi
  fi

  echo ATLASINC = $ATLASROOT/include >> kaldi.mk
  echo ATLASLIBS = $ATLASLIBS >> kaldi.mk
  if [[ "$TARGET_ARCH" == arm* ]]; then
    cat makefiles/linux_atlas_arm.mk >> kaldi.mk
  elif [[ "$TARGET_ARCH" == ppc64le ]]; then
    cat makefiles/linux_atlas_ppc64le.mk >> kaldi.mk
  else
    cat makefiles/linux_atlas.mk >> kaldi.mk
  fi
  fix_cxx_flag
  add_cross_tools
  $use_cuda && configure_cuda
  linux_configure_speex
  echo "Successfully configured for Linux [dynamic libraries] with ATLASLIBS =$ATLASLIBS"
  exit_success;
}

echo "Configuring ..."

if [ ! -f makefiles/common.mk ]; then
    failure makefiles/common.mk not found
fi


echo "Checking OpenFST library in $FSTROOT ..."
if [ ! -f $FSTROOT/include/fst/fst.h  ]; then
    failure "Could not find file $FSTROOT/include/fst/fst.h:
    you may not have installed OpenFst.  See ../tools/INSTALL"
fi
echo Checking OpenFst library was patched.
if ! grep "multiple repeated" $FSTROOT/include/fst/minimize.h >/dev/null; then
    echo "**  ERROR  **"
    echo "** $FSTROOT/include/fst/minimize.h seems not to be patched:"
    echo "patch not applied?  FST tools will not work in our recipe."
    exit 1;
fi

# back up the old one in case we modified it
if [ -f kaldi.mk ]; then
  echo "Backing up kaldi.mk to kaldi.mk.bak"
  cp kaldi.mk kaldi.mk.bak
fi

printf "# This file was generated using the following command:\n# $cmd_line\n\n" > kaldi.mk
cat makefiles/common.mk >> kaldi.mk
if $dynamic_kaldi ; then
KALDILIBDIR=`pwd`/lib
echo "KALDI_FLAVOR := dynamic" >> kaldi.mk
echo "KALDILIBDIR := $KALDILIBDIR" >> kaldi.mk
fi
echo "CONFIGURE_VERSION := $CONFIGURE_VERSION" >> kaldi.mk
echo "FSTROOT = $FSTROOT" >> kaldi.mk

# Check installed OpenFst version and add C++11 flags if OpenFst >= 1.4
OPENFST_VER="${OPENFST_VER:-`grep 'PACKAGE_VERSION' $FSTROOT/Makefile | sed -e 's:.*= ::'`}"
echo "OPENFST_VER = $OPENFST_VER" >> kaldi.mk
OPENFST_VER_NUM=`echo $OPENFST_VER | sed 's/\./ /g' | xargs printf "%d%02d%02d"`
if [ $OPENFST_VER_NUM -ge 10400 ]; then
  echo "OPENFST_GE_10400 = 1" >> kaldi.mk
  echo "EXTRA_CXXFLAGS += -DHAVE_OPENFST_GE_10400 -std=c++0x" >> kaldi.mk
else
  echo "OPENFST_GE_10400 = 0" >> kaldi.mk
fi

# Most of the OS-specific steps below will append to kaldi.mk
echo "Doing OS specific configurations ..."

if $android ; then
  OPENFSTLIBS="$FSTROOT/lib/libfst.a"
  echo "OPENFSTLIBS = $OPENFSTLIBS" >> kaldi.mk

  if [ -z $ANDROIDINC ] ;  then
    failure "--android-includes must be specified for android builds"
  fi

  if [ -z $HOST ] ; then
    failure "HOST must be specified for android builds"
  fi

  OPENBLASROOT=`rel2abs "$OPENBLASROOT"`
  if [ -z "$OPENBLASROOT" ]; then
    failure "Must specify the location of OPENBLAS with --openblas-root option (and it must exist)"
  fi
  if [ ! -f $OPENBLASROOT/lib/libopenblas.a ]; then
    failure "Expected to find the file $OPENBLASROOT/lib/libopenblas.a"
  fi
  echo "Your math library seems to be OpenBLAS.  Configuring appropriately."

  OPENBLASLIBS="$OPENBLASROOT/lib/libopenblas.a $OPENBLASROOT/lib/libclapack.a $OPENBLASROOT/lib/liblapack.a $OPENBLASROOT/lib/libblas.a $OPENBLASROOT/lib/libf2c.a"
  echo "OPENBLASROOT = $OPENBLASROOT" >> kaldi.mk
  echo "OPENBLASLIBS = $OPENBLASLIBS" >> kaldi.mk
  echo "ANDROIDINC = $ANDROIDINC" >> kaldi.mk

  cat makefiles/android_openblas.mk >> kaldi.mk

  add_cross_tools

  echo "Successfully configured OpenBLAS from $OPENBLASROOT."
  echo "Configuration succeeded for platform Android"
  exit_success
fi


# Check for Darwin at first, because we later call uname -o (for Cygwin)
# which crashes on Darwin. Also the linear algebra libraries on Macs are
# used differently (through the Accelerate framework) than on Linux.
if [ "`uname`" == "Darwin"  ]; then
 $use_cuda && configure_cuda
  echo "On Darwin: checking for Accelerate framework ..."
  if [ ! -e /System/Library/Frameworks/Accelerate.framework ]; then
    failure "Need the Accelerate.framework to compile on Darwin."
  fi
  if [ ! -f $FSTROOT/lib/libfst.a ]; then
    failure "Static OpenFST library not found:  See ../tools/INSTALL"
  fi
  # posix_memalign and gcc -rdynamic options not present on OS X 10.5.*
  osx_ver=`sw_vers | grep ProductVersion | awk '{print $2}' | awk '{split($0,a,"."); print a[1] "." a[2]; }'`
  echo "Configuring for OS X version $osx_ver ..."
  if [ "$osx_ver" == "10.5" ]; then
    check_exists makefiles/darwin_10_5.mk
    cat makefiles/darwin_10_5.mk >> kaldi.mk
  elif [ "$osx_ver" == "10.6" ]; then
    check_exists makefiles/darwin_10_6.mk
    cat makefiles/darwin_10_6.mk >> kaldi.mk
  elif [ "$osx_ver" == "10.7" ]; then
    check_exists makefiles/darwin_10_7.mk
    cat makefiles/darwin_10_7.mk >> kaldi.mk
  elif [ "$osx_ver" == "10.8" ]; then
    check_exists makefiles/darwin_10_8.mk
    cat makefiles/darwin_10_8.mk >> kaldi.mk
  elif [ "$osx_ver" == "10.9" ]; then
    check_exists makefiles/darwin_10_9.mk
    cat makefiles/darwin_10_9.mk >> kaldi.mk
  elif [ "$osx_ver" == "10.10" ]; then
    check_exists makefiles/darwin_10_10.mk
    cat makefiles/darwin_10_10.mk >> kaldi.mk
  elif [ "$osx_ver" == "10.11" ]; then
    check_exists makefiles/darwin_10_11.mk
    cat makefiles/darwin_10_11.mk >> kaldi.mk
    echo "**BAD WARNING**: You are using OS X El Capitan.  Some versions of this OS"
    echo "**BAD WARNING**: have a bug in the BLAS implementation that affects Kaldi."
    echo "**BAD WARNING**: After compiling, cd to matrix/ and type 'make test'.  The"
    echo "**BAD WARNING**: test will fail if the problem exists in your version. "
    echo "**BAD WARNING**: Eventually this issue will be fixed by system updates from"
    echo "**BAD WARNING**  Apple.  Unexplained crashes with reports of NaNs will"
    echo "**BAD WARNING**  be caused by this bug, but some recipes will (sometimes) work."
    sleep 1; echo -n .; sleep 1; echo -n .; sleep 1; echo .
  elif [ "$osx_ver" == "10.12" ]; then
    check_exists makefiles/darwin_10_12.mk
    cat makefiles/darwin_10_12.mk >> kaldi.mk
  else
    failure "OS X version '$osx_ver' not supported"
  fi
  echo "Configuration succeeded for platform Darwin."
  exit_success;
fi

if [ "`uname -o`" == "Cygwin"  ]; then
    echo "On Cygwin: checking for linear algebra libraries ..."
    if [ ! -f ../tools/CLAPACK/clapack.h ]; then
        failure "could not find file ../tools/CLAPACK/clapack.h"
    fi
    if [ ! -f /usr/lib/lapack/cygblas-0.dll ]; then
       failure "please first install package liblapack0"
    fi
    cat makefiles/cygwin.mk >> kaldi.mk
    echo "Configuration succeeded for platform cygwin"
    exit_success;
fi

if [ "`uname`" == "Linux" ]; then
  if  $static_fst ; then
      OPENFSTLIBS="$FSTROOT/lib/libfst.a"
      fst_type='a'
  else
      OPENFSTLIBS="-L${FSTROOT}/lib -lfst"
      OPENFSTLDFLAGS="-Wl,-rpath=${FSTROOT}/lib"
      fst_type='so'
  fi
  if [ ! -f "$FSTROOT/lib/libfst.${fst_type}" ]; then
    failure "Static=[$static_fst] OpenFST library not found:  See ../tools/INSTALL"
  fi
  echo OPENFSTLIBS = $OPENFSTLIBS >> kaldi.mk
  echo OPENFSTLDFLAGS = $OPENFSTLDFLAGS >> kaldi.mk

  echo "On Linux: Checking for linear algebra header files ..."
  if [ "$MATHLIB" == "ATLAS" ]; then
    if [ ! -f $ATLASROOT/include/cblas.h ] || [ ! -f $ATLASROOT/include/clapack.h ] ; then
      failure "Could not find required header files cblas.h or clapack.h in ATLAS dir '$ATLASROOT/include'"
    fi
    echo "Using ATLAS as the linear algebra library."

    # Finding out where the libraries are located:
    # First we look for the static libraries and then look for dynamic ones.
    # We're looking for four libraries, all in the same directory, named
    # libcblas.a, libatlas.a, libf77blas.a, and a library that's variously
    # named liblapack.a, libclapack.a, or liblapack_atlas.a, but which exports
    # the symbol ATL_cgetrf.
    # Note: there is a different type of ATLAS installation that is not
    # covered.  We saw a case where there was a directory called /usr/lib/atlas
    # containing {liblapack.a,libblas.a}, and linking against just these two
    # libraries worked.

    if $static_math; then
      # Prefer static to dynamic math.
      linux_configure_static || \
        linux_configure_debian_ubuntu3 || \
        linux_configure_dynamic || \
        linux_configure_debian_ubuntu 64 || \
        linux_configure_debian_ubuntu || \
        linux_configure_debian7 || \
        linux_configure_redhat 64 || \
        linux_configure_redhat || \
        linux_configure_redhat_fat 64 || \
        linux_configure_redhat_fat || \
        linux_atlas_failure "Failed to configure ATLAS lbiraries";
    else
      # Prefer dynamic to static math.
      linux_configure_debian_ubuntu3 || \
        linux_configure_dynamic || \
        linux_configure_static || \
        linux_configure_debian_ubuntu 64 || \
        linux_configure_debian_ubuntu || \
        linux_configure_debian7 || \
        linux_configure_redhat 64 || \
        linux_configure_redhat || \
        linux_configure_redhat_fat 64 || \
        linux_configure_redhat_fat || \
        linux_atlas_failure "Failed to configure ATLAS lbiraries";
    fi

  elif [ "$MATHLIB" == "MKL" ]; then
    if [ "$TARGET_ARCH" != "x86_64" ]; then
      failure "MKL on Linux only supported for Intel(R) 64 architecture (x86_64).
      See makefiles/linux_64_mkl.mk to manually configure for other platforms."
    fi

    if  ( is_set "$MKLROOT" && ! is_set "$MKLLIBDIR" ); then
      echo -n "Configuring MKL library directory: "
      MKLLIBDIR=`linux_configure_mkllibdir $MKLROOT`
      if [ $? -ne 0 ]; then
        failure "MKL libraries could not be found. Please use the switch --mkl-libdir "
      else
        echo "Found: $MKLLIBDIR"
      fi
    fi

    MKL_LINK_LINE=`linux_configure_mkl_libraries "$MKLLIBDIR" $static_math $mkl_threading` || exit 1
    echo "MKL configured with threading: $mkl_threading, libs: $MKL_LINK_LINE"

    MKL_COMPILE_LINE=`linux_configure_mkl_includes "$MKLROOT" "$MKLLIBDIR"` || exit 1
    echo "MKL include directory configured as: $MKL_COMPILE_LINE"
    MKL_COMPILE_LINE=" -I${MKL_COMPILE_LINE} "

    THREADING_LINE=`linux_configure_mkl_threading $MKLROOT $MKLLIBDIR $static_math $mkl_threading` || exit 1
    EXTRA_LIBS=`linux_configure_mkl_extra $static_math $mkl_threading` || exit 1
    if [ ! -z "$THREADING_LINE" ] || [ ! -z "$EXTRA_LIBS" ]; then
      echo "MKL threading libraries configured as $THREADING_LINE $EXTRA_LIBS"
    fi

    echo "Using Intel MKL as the linear algebra library."
    (
      cd probe; rm -f mkl-test;
      g++ mkl-test.cc -o mkl-test $MKL_COMPILE_LINE $MKL_LINK_LINE $THREADING_LINE $EXTRA_LIBS || exit 1
      test -f ./mkl-test || exit 1
      ./mkl-test || exit 1
      cd ..
    ) || failure "Cannot validate the MKL switches"

    echo MKLROOT = $MKLROOT >> kaldi.mk
    if [ ! -z $MKLLIBDIR ]; then
      echo MKLLIB = $MKLLIBDIR >> kaldi.mk
    fi
    check_exists makefiles/linux_x86_64_mkl.mk
    cat makefiles/linux_x86_64_mkl.mk >> kaldi.mk
    fix_cxx_flag
    echo "MKLFLAGS = ${MKL_LINK_LINE} ${THREADING_LINE} $EXTRA_LIBS " >> kaldi.mk

    $use_cuda && configure_cuda
    linux_configure_speex
    echo "Successfully configured for Linux with MKL libs from $MKLROOT"
    exit_success;

  elif [ "$MATHLIB" == "CLAPACK" ]; then
    if [ -z "$CLAPACKROOT" ]; then
      failure "Must specify the location of CLAPACK with --clapack-root option (and it must exist)"
    fi
    if [ ! -f ../tools/CLAPACK/clapack.h ]; then
      failure could not find file ../tools/CLAPACK/clapack.h
    fi
    if [ ! -d "$CLAPACKROOT" ]; then
      failure "The directory $CLAPACKROOT does not exist"
    fi
    # Also check for cblas.h and f2c.h
    echo "Using CLAPACK as the linear algebra library."
    if [ ! -f makefiles/linux_clapack.mk ]; then
      failure "makefiles/linux_clapack.mk not found."
    fi
    if [[ "$TARGET_ARCH" == arm* ]]; then
      cat makefiles/linux_clapack_arm.mk >> kaldi.mk
    else
      cat makefiles/linux_clapack.mk >> kaldi.mk
    fi
    fix_cxx_flag
    add_cross_tools
    echo "Warning (CLAPACK): this part of the configure process is not properly tested and will not work."
    $use_cuda && configure_cuda
    linux_configure_speex
    echo "Successfully configured for Linux with CLAPACK libs from $CLAPACKROOT"
    exit_success;
  elif [ "$MATHLIB" == "OPENBLAS" ]; then
    OPENBLASROOT=`rel2abs "$OPENBLASROOT"`
    if [ -z "$OPENBLASROOT" ]; then
      failure "Must specify the location of OPENBLAS with --openblas-root option (and it must exist)"
    fi
    if [ ! -f $OPENBLASROOT/lib/libopenblas.so ]; then
      failure "Expected to find the file $OPENBLASROOT/lib/libopenblas.so"
    fi
    echo "Your math library seems to be OpenBLAS.  Configuring appropriately."
    if $static_math; then
      echo "Configuring static OpenBlas since --static-math=yes"
      OPENBLASLIBS="$OPENBLASROOT/lib/libopenblas.a -lgfortran"
    else
      echo "Configuring dynamically loaded OpenBlas since --static-math=no (the default)"
      OPENBLASLIBS="-L$OPENBLASROOT/lib -lopenblas -lgfortran -Wl,-rpath=$OPENBLASROOT/lib"
    fi
    echo "OPENBLASLIBS = $OPENBLASLIBS" >> kaldi.mk
    echo "OPENBLASROOT = $OPENBLASROOT" >> kaldi.mk
    if [[ "$TARGET_ARCH" == arm* ]]; then
      cat makefiles/linux_openblas_arm.mk >> kaldi.mk
    elif [[ "$TARGET_ARCH" == ppc64le ]]; then
      cat makefiles/linux_openblas_ppc64le.mk >> kaldi.mk
    else
      cat makefiles/linux_openblas.mk >> kaldi.mk
    fi
    fix_cxx_flag
    add_cross_tools
    $use_cuda && configure_cuda
    linux_configure_speex
    echo "Successfully configured OpenBLAS from $OPENBLASROOT."
    exit_success;
  else
    failure "Unsupported linear algebra library '$MATHLIB'"
  fi
fi

failure Could not detect platform or we have not yet worked out the appropriate configuration for this platform.  Please contact the developers.
